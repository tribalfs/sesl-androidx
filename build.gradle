/*
 * Copyright (C) 2019 The Android Open Source Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

plugins {
    id("com.android.application") version '8.4.0-rc02' apply false
    id("com.android.library") version '8.4.0-rc02' apply false
    id("org.jetbrains.kotlin.android") version "1.9.22" apply false
}

apply from: new File("manifest.gradle")

/**
 * Note: To configure GitHub credentials, you have to do one of the following:
 * <ul>
 *      <li>Add `githubUsername` and `githubAccessToken` to Global Gradle Properties</li>
 *      <li>Set `GITHUB_USERNAME` and `GITHUB_ACCESS_TOKEN` in your environment variables</li>
 *      <li>Create a `github.properties` file in your project folder with the following content:</li>
 * </ul>
 *
 * <pre>
 *   githubUsername="YOUR_GITHUB_USERNAME"
 *   githubAccessToken="YOUR_GITHUB_ACCESS_TOKEN"
 * </pre>
 */
def githubProperties = new Properties().with {
    def file = rootProject?.file("github.properties")
    if (file?.exists()) file.withInputStream { load(it) }
    it
}
def githubUsername = rootProject.hasProperty('githubUsername') ? rootProject.githubUsername : null // Global Gradle Properties
        ?: githubProperties.getProperty("githubUsername") // github.properties file
        ?: System.getenv("GITHUB_USERNAME") // Environment variable
        ?: error("GitHub username not found")
def githubAccessToken = rootProject.hasProperty('githubAccessToken') ? rootProject.githubAccessToken : null // Global Gradle Properties
        ?: githubProperties.getProperty("githubAccessToken") // github.properties file
        ?: System.getenv("GITHUB_ACCESS_TOKEN") // Environment variable
        ?: error("GitHub Access Token not found")


allprojects {
    tasks.withType(Javadoc).tap {
        configureEach {
            options.addStringOption('Xdoclint:none', '-quiet')
            options.addStringOption('encoding', 'UTF-8')
            options.addStringOption('charSet', 'UTF-8')
        }
    }
}

tasks.register('clean', Delete) {
    delete rootProject.buildDir
}

subprojects {

    project.plugins.whenPluginAdded { plugin ->
        def isAndroidLibrary = "com.android.build.gradle.LibraryPlugin" == plugin.class.name
        def isAndroidApp = "com.android.build.gradle.AppPlugin" == plugin.class.name
        def isAndroidTest = "com.android.build.gradle.TestPlugin" == plugin.class.name

        if (isAndroidLibrary || isAndroidApp || isAndroidTest) {
            project.android {
                def versionInfoKey = "androidx." + project.projectDir.getName()
                def version_info = rootProject.ext.versions_metadata[versionInfoKey]

                if (compileSdkPreview == null) {
                    compileSdk = version_info[4]
                }

                defaultConfig.minSdk = version_info[3]
                defaultConfig.targetSdk = version_info[4]

                if (isAndroidLibrary) {
                    defaultConfig.versionName = "${version_info[0]}+${version_info[1]}+${version_info[2]}"
                    println "set versionName=${defaultConfig.versionName}"

                    android {
                        lint {
                            baseline = file("lint-baseline.xml")
                        }
                    }

                    publishing {
                        singleVariant("release") {
                            withSourcesJar()
                            withJavadocJar()
                        }
                    }


                    afterEvaluate {
                        def JAVA_RESOURCES_TEMP_DIR = "$buildDir/javaResources"
                        def versionFileName = namespace + '_' + project.projectDir.getName() + '.version'
                        task writeVersionFile() {
                            def versionFileDir = JAVA_RESOURCES_TEMP_DIR + '/META-INF'
                            new File(versionFileDir).mkdirs()
                            new File(versionFileDir + '/' + versionFileName).text = defaultConfig.versionName + "\n"
                        }
                        println "writeVersionFile $defaultConfig.versionName >> $versionFileName"

                        libraryVariants.all {
                            it.processJavaResourcesProvider.get().dependsOn(writeVersionFile)
                        }

                        project.android.sourceSets.main.resources.srcDir JAVA_RESOURCES_TEMP_DIR

                        task updateVersionBadge() {
                            def readmeFile = file("${rootProject.projectDir}/README.md")
                            def readmeContent = new String(readmeFile.bytes)

                            def parentDir = project.projectDir.parent.split("\\\\").last()
                            def moduleDir = project.projectDir.name

                            def escapedParentDir = parentDir.replaceAll('\\.', '\\\\.').replaceAll('-', '--')
                            def escapedModuleDir = moduleDir.replaceAll('\\.', '\\\\.').replaceAll('-', '--')

                            def badgeUrl = "https://img.shields.io/badge/sesl.androidx.$escapedParentDir:$escapedModuleDir-${version_info[0].replaceAll('-', '--')}%2B${version_info[1].replaceAll('-', '--')}%2B${version_info[2]}-blue?logo=GitHub"
                            def pattern = ~/https:\/\/img\.shields\.io\/badge\/sesl\.androidx\.${escapedParentDir}:${escapedModuleDir}-\d+.*blue\?logo=GitHub/

                            readmeContent = readmeContent.replaceAll(pattern, badgeUrl)
                            new File(readmeFile.path).text = readmeContent
                        }

                    }

                }
            }
        }
        if (isAndroidLibrary) {

            project.afterEvaluate {
                publishing {
                    publications {
                        gpr(MavenPublication) {
                            version = android.defaultConfig.versionName
                            afterEvaluate {
                                from components.release
                            }

                        }
                    }

                    repositories {
                        maven {
                            name = "GitHubPackages"
                            /** Configure path of your package repository on Github
                             *  Replace GITHUB_USERID with your/organisation Github userID and REPOSITORY with the repository name on GitHub
                             */
                            url = uri("https://maven.pkg.github.com/tribalfs/sesl-androidx")

                            credentials {
                                username = githubUsername
                                password = githubAccessToken
                            }
                        }
                    }
                }
            }
        }
    }

}